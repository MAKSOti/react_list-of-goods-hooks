{"version":3,"sources":["App.tsx","Components/Button.tsx","index.tsx"],"names":["SortType","Button","children","props","type","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","goods","sort","good1","good2","LENGTH","length","ALPABET","localeCompare","reverse","getSortedGoods","shouldRenderReset","className","classNames","onClick","map","product","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,wGCbQC,EAA0B,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAaC,EAAY,iBACjE,OACE,gDACEC,KAAK,UACDD,GAFN,aAIGD,MDNMG,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGL,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAkCE,IAAMM,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASP,EAASU,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAOMC,EAjCD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENK,EAAY,YAAOC,GAezB,OAbAD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAQN,GACN,KAAKX,EAASkB,OACZ,OAAOF,EAAMG,OAASF,EAAME,OAE9B,KAAKnB,EAASoB,QACZ,OAAOJ,EAAMK,cAAcJ,GAE7B,QACE,OAAO,MAINT,EACHK,EAAaS,UACbT,EAYiBU,CAAelB,EAClC,CAAEM,WAAUH,eAERgB,EAAoBhB,GAAcG,IAAaX,EAASU,KAE9D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CACEA,UAAWC,IACT,SACA,UACA,CAAE,WAAYf,IAAaX,EAASoB,UAEtCO,QAAS,kBAAMf,EAAYZ,EAASoB,UANtC,iCAWA,cAAC,EAAD,CACEK,UAAWC,IACT,SACA,aACA,CAAE,WAAYf,IAAaX,EAASkB,SAEtCS,QAAS,kBAAMf,EAAYZ,EAASkB,SANtC,4BAWA,cAAC,EAAD,CACEO,UAAWC,IACT,SACA,aACA,CAAE,YAAalB,IAEjBmB,QAAS,kBAAMlB,GAAeD,IANhC,qBAWCgB,GACC,cAAC,EAAD,CACEC,UAAU,4BACVE,QAjDS,WACjBlB,GAAc,GACdG,EAAYZ,EAASU,OA6Cf,sBASJ,6BACGG,EAAae,KAAI,SAAAC,GAAO,OACvB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YEhHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8a001555.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { Button } from './Components/Button';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\ntype ReorderOptions = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport function getSortedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      case SortType.ALPABET:\n        return good1.localeCompare(good2);\n\n      default:\n        return 0;\n    }\n  });\n\n  return isReversed\n    ? visibleGoods.reverse()\n    : visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const resetOrder = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const visibleGoods = getSortedGoods(goodsFromServer,\n    { sortType, isReversed });\n\n  const shouldRenderReset = isReversed || sortType !== SortType.NONE;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <Button\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPABET },\n          )}\n          onClick={() => setSortType(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </Button>\n\n        <Button\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </Button>\n\n        <Button\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </Button>\n\n        {shouldRenderReset && (\n          <Button\n            className=\"button is-danger is-light\"\n            onClick={resetOrder}\n          >\n            Reset\n          </Button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(product => (\n          <li data-cy=\"Good\" key={product}>\n            {product}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  children: React.ReactNode;\n};\n\nexport const Button: React.FC<Props> = ({ children, ...props }) => {\n  return (\n    <button\n      type=\"button\"\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}